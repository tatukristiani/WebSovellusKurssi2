{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tatuk\\\\OneDrive\\\\Desktop\\\\VisualStudioProjects\\\\reactrouter-master\\\\src\\\\components\\\\Add.js\";\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers';\nimport * as Yup from 'yup';\n\nconst Add = ({\n  onSubmit,\n  inputValue,\n  onChange\n}) => {\n  var _errors$content;\n\n  const validationSchema = Yup.object().shape({\n    content: Yup.string().required(\"Content is required.\")\n  });\n  const {\n    content,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    onReset: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: content,\n    value: inputValue,\n    onChange: onChange,\n    className: `form-control ${errors.content ? 'is-invalid' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 20\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 20\n    }\n  }, (_errors$content = errors.content) === null || _errors$content === void 0 ? void 0 : _errors$content.message), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 20\n    }\n  }, \"Save Node\"))));\n};\n\nexport default Add;","map":{"version":3,"sources":["C:/Users/tatuk/OneDrive/Desktop/VisualStudioProjects/reactrouter-master/src/components/Add.js"],"names":["React","useState","useForm","yupResolver","Yup","Add","onSubmit","inputValue","onChange","validationSchema","object","shape","content","string","required","handleSubmit","reset","errors","resolver","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AAGA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA;AAAvB,CAAD,KAAsC;AAAA;;AAC9C,QAAMC,gBAAgB,GAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,OAAO,EAAER,GAAG,CAACS,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB;AAD+B,GAAnB,CAAzB;AAGA,QAAM;AAACF,IAAAA,OAAD;AAAUG,IAAAA,YAAV;AAAwBC,IAAAA,KAAxB;AAA+BC,IAAAA;AAA/B,MAA0Cf,OAAO,CAAC;AACpDgB,IAAAA,QAAQ,EAAEf,WAAW,CAACM,gBAAD;AAD+B,GAAD,CAAvD;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,QAAQ,EAAEM,YAAhB;AAA8B,IAAA,OAAO,EAAEC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,GAAG,EAAEJ,OAAZ;AAAqB,IAAA,KAAK,EAAEL,UAA5B;AAAwC,IAAA,QAAQ,EAAEC,QAAlD;AAA4D,IAAA,SAAS,EAAG,gBAAeS,MAAM,CAACL,OAAP,GAAiB,YAAjB,GAAgC,EAAG,EAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAmCK,MAAM,CAACL,OAA1C,oDAAmC,gBAAgBO,OAAnD,CAFJ,eAGI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,CADJ,CADH,CADJ;AAWH,CApBD;;AAuBA,eAAed,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport {useForm} from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers'\nimport * as Yup from 'yup'\n\n\nconst Add = ({onSubmit, inputValue, onChange}) => {\n    const validationSchema = Yup.object().shape({\n        content: Yup.string().required(\"Content is required.\")\n    })\n    const {content, handleSubmit, reset, errors } = useForm({\n        resolver: yupResolver(validationSchema)\n    })\n\n\n    return(\n        <div className=\"container\">\n           <div>\n               <form onSubmit={handleSubmit} onReset={reset}>\n                   <input ref={content} value={inputValue} onChange={onChange} className={`form-control ${errors.content ? 'is-invalid' : ''}`} />\n                   <div className='invalid-feedback'>{errors.content?.message}</div>\n                   <button type=\"submit\">Save Node</button>\n               </form>\n           </div>\n        </div>\n    )\n}\n\n\nexport default Add"]},"metadata":{},"sourceType":"module"}